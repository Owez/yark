@using YarkApiClient
@using PSC.Blazor.Components.Chartjs
@using PSC.Blazor.Components.Chartjs.Enums
@using PSC.Blazor.Components.Chartjs.Models
@using PSC.Blazor.Components.Chartjs.Models.Line

<Chart Config="ChartConfig" @ref="Chart"></Chart>

@code {
    [Parameter, EditorRequired]
    public string Label { get; set; } = default!;

    [Parameter, EditorRequired]
    public Elements<int?> Elements { get; set; } = default!;

    LineChartConfig ChartConfig;
    Chart Chart;

    protected override void OnInitialized()
    {
        ChartConfig = new LineChartConfig()
            {
                Options = new PSC.Blazor.Components.Chartjs.Models.Common.Options
                {

                }
            };
        Elements<int> furnishedElements = RemoveNullIntValues(Elements);
        ChartConfig.Data.Labels = GenerateLabels(furnishedElements);
        ChartConfig.Data.Datasets.Add(new LineDataset()
            {
                Label = Label,
                Data = furnishedElements.Select(el => (decimal?)el.Value).ToList(),
                BackgroundColor = "#888888",
                BorderColor = "#000000",
                BorderWidth = 1
            });

        base.OnInitialized();
    }

    List<string> GenerateLabels(Elements<int> furnishedElements)
    {
        List<string> generated = new List<string>();
        foreach (var kvp in furnishedElements)
        {
            DateTime date = kvp.Key;
            string suffix = GetDayOrdinalSuffix(date.Day);
            string formattedDate = $"{date.Day}{suffix} {date.ToString("MMM")}";
            generated.Add(formattedDate);
        }
        return generated;
    }

    string GetDayOrdinalSuffix(int day)
    {
        if (day >= 11 && day <= 13)
        {
            return "th";
        }
        switch (day % 10)
        {
            case 1:
                return "st";
            case 2:
                return "nd";
            case 3:
                return "rd";
            default:
                return "th";
        }
    }

    Elements<int> RemoveNullIntValues(Elements<int?> dateData)
    {
        Elements<int> filteredData = new Elements<int>();
        foreach (var kvp in dateData)
        {
            if (kvp.Value.HasValue)
            {
                filteredData[kvp.Key] = kvp.Value.Value;
            }
        }
        return filteredData;
    }
}