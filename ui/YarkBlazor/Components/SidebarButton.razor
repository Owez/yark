@inject NavigationManager NavManager
@implements IDisposable
@inject ILogger<SidebarButton> logger
@using System.Collections.Specialized
@using YarkApiClient

<a href=@Link class="sidebar-button @((Active ? "sidebar-active" : "")) @((Inside ? "sidebar-inside" : ""))">
    <YarkBlazor.Components.SidebarButtonInner Title=@Title Icon=@Icon Active=@Active Inside=@Inside />
</a>

<style scoped>
    .sidebar-button {
        color: initial;
        text-decoration: none;
        width: 100%;
        display: flex;
        align-items: center;
        box-sizing: border-box;
        padding-top: 12.5px;
        padding-bottom: 12.5px;
        margin-top: 2.5px;
        margin-bottom: 2.5px;
        padding-left: 12.5px;
        padding-right: 12.5px;
        color: #171717;
    }

    .sidebar-active {
        color: #3C60D7;
        border-radius: 15px;
        background-color: #E9F0FE;
    }

    .sidebar-inside {
        color: #982BDB;
        border-radius: 15px;
        background-color: #F7EBFE;
    }
</style>

@code {
    [Parameter]
    public string Title { get; set; } = "Button";

    [Parameter]
    public string Link { get; set; } = "/";

    [Parameter]
    public IconKind Icon { get; set; } = IconKind.Placeholder;

    [Parameter]
    public VideoCollectionKind? VideoListButtonKind { get; set; } = null;

    bool Active { get; set; } = false;
    bool Inside { get; set; } = false;
    protected override void OnInitialized()
    {
        Uri uri = new Uri(NavManager.Uri.ToString());
        ProcessActiveFromUri(uri);
        ProcessInsideFromUri(uri);

        NavManager.LocationChanged += HandleLocationChanged;

        base.OnInitialized();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

    void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Uri uri = new Uri(e.Location);
        ProcessActiveFromUri(uri);
        ProcessInsideFromUri(uri);
    }

    void ProcessActiveFromUri(Uri uri)
    {
        string absolutePath = uri.AbsolutePath;
        ChangeActive(absolutePath == Link);
    }

    void ChangeActive(bool newActive)
    {
        if (newActive == Active)
        {
            return;
        }
        Active = newActive;
        StateHasChanged();
    }

    void ProcessInsideFromUri(Uri uri)
    {
        if (VideoListButtonKind == null) { return; }

        NameValueCollection? queryDirectory = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string? queryKind = queryDirectory.Get("kind");
        logger.LogInformation(queryKind);
        if (queryKind == null)
        {
            ChangeInside(false);
            return;
        }

        VideoCollectionKind videoCollectionKind = VideoCollectionKindMethods.DecodeFromString(queryKind);
        ChangeInside(videoCollectionKind == VideoListButtonKind);
    }

    void ChangeInside(bool newInside)
    {
        if (newInside == Inside)
        {
            return;
        }
        Inside = newInside;
        StateHasChanged();
    }
}