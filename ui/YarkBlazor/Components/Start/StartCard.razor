<div class="start-card @GetDynamicClasses()">
    <a href=@CorrectExpandedLink() class="start-card-link">
        <div>
            <img src=@IconKindMethods.GetUri(Orb) alt="Orb" class="orb">
            <h1 class="start-card-title">@Title</h1>
            <p class="start-card-description">@Description</p>
        </div>
    </a>
    @ChildContent
</div>

<style scoped>
    .start-card {
        margin: 20px;
        border-radius: 20px;
        border: 1px solid rgba(0, 0, 0, 0.12);
        width: calc(10vw + 12.5rem);
        min-width: 18rem;
        height: 25rem;
    }

    .start-card-left {
        margin-right: 0;
    }

    .start-card-size-half {
        height: calc(25rem / 2);
    }

    .start-card-size-full {
        width: calc(20vw + 25rem + 20px + 2.25px);
        overflow-y: auto;
        min-height: 25rem;
        height: 75vh;
    }

    .start-card-link {
        color: inherit;
        text-decoration: none;
    }

    .start-card-link>div {
        width: 100%;
        box-sizing: border-box;
        padding: 20px;
    }

    .orb {
        width: 50px;
        height: 50px;
    }

    .start-card-title {
        font-size: 18pt;
        font-weight: 500;
        margin-top: 7.5px;
        margin-bottom: 1rem;
    }

    .start-card-description {
        margin: 0;
        font-size: 12pt;
    }
</style>

@code {
    const string DEFAULT_LINK = "/start";

    [Parameter]
    public StartCardKind Kind { get; set; } = StartCardKind.Normal;

    [Parameter]
    public string Title { get; set; } = "Start Card";

    [Parameter]
    public string Description { get; set; } = "Description";

    [Parameter]
    public string Link { get; set; } = DEFAULT_LINK;

    [Parameter]
    public IconKind Orb { get; set; } = IconKind.GreenOrb;

    [Parameter]
    public bool OnLeft { get; set; } = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    string CorrectExpandedLink()
    {
        if (Kind == StartCardKind.Full)
        {
            return DEFAULT_LINK;
        }
        return Link;
    }

    string GetDynamicClasses()
    {
        List<string> classes = new List<string> { GetLeftClass(), GetSizeClass() };
        return String.Join(" ", classes.ToArray());
    }

    string GetLeftClass()
    {
        if (OnLeft)
        {
            return "start-card-left";
        }
        return "";
    }

    string GetSizeClass()
    {
        switch (Kind)
        {
            case StartCardKind.Half: return "start-card-size-half";
            case StartCardKind.Full: return "start-card-size-full";
        }
        return "";
    }
}