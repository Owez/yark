@using YarkApiClient
@inject NavigationManager NavManager
@inject Blazored.SessionStorage.ISyncSessionStorageService SessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (Explorer != null)
{
    @* Up-directory button *@
    @if (Explorer.Path != "/" && Explorer.Path != "\\")
    {
        @* TODO: connect *@
        <button class="file-button" onclick=@UpDirectory><img
                src=@IconKindMethods.GetUri(IconKind.Folder) />@Explorer.Path/..</button>
    }
    @* Files *@
    @foreach (ExplorerFile file in GenerateFileList(Explorer.Files))
    {
        @* TODO: split it into two columns *@
        <button class="file-button" onclick="@(async () => await FileButtonClicked(file))">
            <img src=@IconKindMethods.GetUri(GetIconKind(file)) />
            @file.Filename
            @if (file.Archive)
            {
                <span class="archive-indicator">(archive)</span>
            }
        </button>
    }
    @* TODO: thing here *@
    <div class="importer-bottom-space" />
}

<style scoped>
    .file-button {
        border: 0;
        background-color: transparent;
        text-align: left;
        display: flex;
        margin-top: 2.5px;
        margin-bottom: 2.5px;
        color: #171717;
        transition: 0.2s;
        font-size: small;
    }

    .file-button:hover {
        background-color: #f6f6f6;
    }

    .file-button>img {
        margin-right: 5px;
    }

    .archive-indicator {
        margin-left: 2.75px;
        margin-top: 2.5px;
        font-size: x-small;
    }

    .importer-bottom-space {
        margin-bottom: 20px;
    }
</style>

@code {
    Explorer? Explorer { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        @* TODO: move away from debugging *@
        Explorer = await Explorer.GetExplorerFromStringAsync(new AdminContext("abc"), "/Users/owen");

        await base.OnInitializedAsync();
    }

    IconKind GetIconKind(ExplorerFile file)
    {
        if (file.Archive)
        {
            return IconKind.FolderArchive;
        }
        else if (file.Directory)
        {
            return IconKind.Folder;
        }
        return IconKind.File;
    }

    List<ExplorerFile> GenerateFileList(List<ExplorerFile> files)
    {
        List<ExplorerFile> archiveBucket = new List<ExplorerFile>();
        List<ExplorerFile> specialsBucket = new List<ExplorerFile>();
        List<ExplorerFile> dirBucket = new List<ExplorerFile>();
        List<ExplorerFile> fileBucket = new List<ExplorerFile>();
        foreach (ExplorerFile file in files)
        {
            if (file.Hidden) { continue; }
            else if (file.Archive) { archiveBucket.Add(file); }
            else if (file.Directory && HasSpecialName(file))
            {
                specialsBucket.Add(file);
            }
            else if (file.Directory)
            {
                dirBucket.Add(file);
            }
            else { fileBucket.Add(file); }
        }
        List<ExplorerFile> kept = archiveBucket;
        kept.AddRange(specialsBucket);
        kept.AddRange(dirBucket);
        kept.AddRange(fileBucket);
        return kept;
    }

    bool HasSpecialName(ExplorerFile file)
    {
        string name = file.Filename.ToLower();
        List<string> specials = new List<string> { "desktop", "documents", "projects", "archives", "yark", "youtube", "archive",
"archival", "osint", "projects", "lake", "data" };
        return specials.Contains(name);
    }

    async Task UpDirectory()
    {
        @* TODO: move away from debugging *@
        Explorer = await Explorer.GetLevelAboveAsync(new AdminContext("abc"));
        StateHasChanged();
    }

    async Task FileButtonClicked(ExplorerFile file)
    {
        @* Open archive if button is for it *@
        if (file.Archive)
        {
            RecentArchiveCollection recentArchives = await RecentArchiveCollection.FromLocalStorage(LocalStorage);
            @* TODO: move away from debugging *@
            RecentArchive recentArchive = await recentArchives.ImportNewArchiveAsync(new AdminContext("abc"), LocalStorage, file);
            await recentArchive.OpenArchive(SessionStorage, NavManager);
        }
        @* Navigate to folder if button is for it *@
        else if (file.Directory)
        {
            @* TODO: move away from debugging *@
            Explorer = await Explorer.GetExplorerFromFileAsync(new AdminContext("abc"), file);
            StateHasChanged();
        }
    }
}